import logging
import asyncio
import psycopg2
import aioschedule
import random
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

TOKEN = "7629647867:AAH2LyM8F6rJkJvA5_F49w4edVaT-sA7Xxg"
DB_CONFIG = {
    "dbname": "random_coffee",
    "user": "postgres",
    "password": "!Postgres321!",
    "host": "localhost"
}

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
def connect_db():
    return psycopg2.connect(**DB_CONFIG)

def init_db():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users(
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE,
            username TEXT,
            name TEXT,
            city TEXT,
            description TEXT,
            mode TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS meetings(
            id SERIAL PRIMARY KEY,
            user1 BIGINT,
            user2 BIGINT,
            date TIMESTAMP DEFAULT NOW(),
            feedback1 TEXT,
            feedback2 TEXT,
            additional_feedback1 TEXT,
            additional_feedback2 TEXT,
            reminder_sent BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (user1) REFERENCES users(telegram_id),
            FOREIGN KEY (user2) REFERENCES users(telegram_id)
        )
    """)
    conn.commit()
    cursor.close()
    conn.close()

class Registration(StatesGroup):
    name = State()
    city = State()
    description = State()
    mode = State()

class Feedback(StatesGroup):
    waiting_for_rating = State()
    waiting_for_text = State()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
rating_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
rating_keyboard.add("üåüüåüüåüüåüüåü –°–£–ü–ï–†!", "üåüüåüüåüüåü–•–û–†–û–®–û", "üåüüåüüåü –ù–û–†–ú–ê–õ–¨–ù–û", "üåüüåü–ù–£, –¢–ê–ö–û–ï", "üåü–ü–õ–û–•–û")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
mode_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
mode_keyboard.add(KeyboardButton("–í –º–æ–µ–º –≥–æ—Ä–æ–¥–µ"), KeyboardButton("–û–Ω–ª–∞–π–Ω"))

#–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Registration.name.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message_handler(state=Registration.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
    await Registration.city.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=Registration.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
    await Registration.description.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(state=Registration.description)
async def process_description(message: types.Message, state: FSMContext):
    if len(message.text) > 300:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π –∫–æ—Ä–æ—á–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    await state.update_data(description=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ–±—â–µ–Ω–∏—è\n–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–Ω–∏–∑—Éüëá", reply_markup=mode_keyboard)
    await Registration.mode.set()

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=Registration.mode)
async def process_mode(message: types.Message, state: FSMContext):
    if message.text not in ["–í –º–æ–µ–º –≥–æ—Ä–æ–¥–µ", "–û–Ω–ª–∞–π–Ω"]:
        await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return


    user_data = await state.get_data()
    telegram_id = message.from_user.id
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO users (telegram_id, username, name, city, description, mode)
        VALUES (%s, %s, %s, %s, %s, %s)
        ON CONFLICT (telegram_id) 
        DO UPDATE 
            SET username=excluded.username,
                name=excluded.name,
                city=excluded.city,
                description=excluded.description,
                mode=excluded.mode
    """, (telegram_id, message.from_user.username, user_data['name'], user_data['city'], user_data['description'], message.text))
    conn.commit()
    cursor.close()
    conn.close()

    await message.answer("–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –û–∂–∏–¥–∞–π –æ—Ç–±–æ—Ä –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä
async def match_pairs():
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT telegram_id, username, city, mode FROM users")
    users = cursor.fetchall()

    offline_users = [u for u in users if u[3] == "–í –º–æ–µ–º –≥–æ—Ä–æ–¥–µ"]
    online_users = [u for u in users if u[3] == "–û–Ω–ª–∞–π–Ω"]

    paired_users = set()
    pairs = []

    for user in offline_users:
        if user[0] in paired_users:
            continue

        same_city_users = [u for u in offline_users if u[2] == user[2] and u[0] != user[0] and u[0] not in paired_users]
        if same_city_users:
            partner = random.choice(same_city_users)
            pairs.append((user, partner))
            paired_users.update([user[0], partner[0]])
        else:
            if offline_users:
                partner = random.choice(online_users)
                pairs.append((user, partner))
                paired_users.update([user[0], partner[0]])
                await bot.send_message(user[0], f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –æ–Ω–ª–∞–π–Ω —Å @{partner[1]}")
                await bot.send_message(partner[0], f"–í–∞—à–∞ –æ–Ω–ª–∞–π–Ω –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{user[1]}\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–∂–∞–≤ –Ω–∞ /feedback")



    remaining_online_users = [u for u in online_users if u[0] not in paired_users]
    random.shuffle(remaining_online_users)

    while len(remaining_online_users) > 1:
        user1 = remaining_online_users.pop()
        user2 = remaining_online_users.pop()
        pairs.append((user1, user2))

    for (user1, user2) in pairs:
        cursor.execute("INSERT INTO meetings (user1, user2) VALUES (%s, %s)", (user1[0], user2[0]))
        conn.commit()
        await bot.send_message(user1[0], f"–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{user2[1]}\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–∂–∞–≤ –Ω–∞ /feedback")
        await bot.send_message(user2[0], f"–í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{user1[1]}\n\n–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–∂–∞–≤ –Ω–∞ /feedback")

    cursor.close()
    conn.close()


#–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
@dp.message_handler(commands=["feedback"])
async def request_feedback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    conn = connect_db()
    cursor = conn.cursor()

    #–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Å—Ç—Ä–µ—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("""
        SELECT id FROM meetings WHERE (user1 = %s OR user2 = %s)
        AND (feedback1 IS NULL OR feedback2 IS NULL)
        ORDER BY date DESC LIMIT 1
    """, (user_id, user_id))
    meeting = cursor.fetchone()

    if meeting:
        await state.update_data(meeting_id=meeting[0])
        await message.answer("–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞? –û—Ü–µ–Ω–∏—Ç–µ –µ–µ:", reply_markup=rating_keyboard)
        await Feedback.waiting_for_rating.set()
    else:
        await message.answer("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.")

    cursor.close()
    conn.close()

@dp.message_handler(state=Feedback.waiting_for_rating)
async def process_rating(message: types.Message, state: FSMContext):
    feedback = message.text
    await state.update_data(feedback=feedback)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤ –æ –≤—Å—Ç—Ä–µ—á–µ:")
    await Feedback.waiting_for_text.set()

@dp.message_handler(state=Feedback.waiting_for_text)
async def process_text_feedback(message: types.Message, state: FSMContext):
    additional_feedback = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    meeting_id = data.get("meeting_id")
    feedback = data.get("feedback")

    if not meeting_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞")
        return



    try:
        with connect_db() as conn:
            with conn.cursor() as cursor:    
                #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤
                cursor.execute("SELECT user1, user2 FROM meetings WHERE id = %s", (meeting_id,))
                meeting = cursor.fetchone()

                if meeting:
                    if meeting[0] == user_id:
                        cursor.execute("""
                            UPDATE meetings
                            SET feedback1 = %s, additional_feedback1 = %s
                            WHERE id = %s
                        """, (feedback, additional_feedback, meeting_id))
                    elif meeting[1] == user_id:
                        cursor.execute("""
                            UPDATE meetings
                            SET feedback2 = %s, additional_feedback2 = %s
                            WHERE id = %s
                        """, (feedback, additional_feedback, meeting_id))

                    conn.commit()
                    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                else:
                    await message.answer("–û—à–∏–±–∫–∞: –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


    except psycopg2.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    await state.finish()





async def scheduler():
    aioschedule.every(3).minutes.do(match_pairs)
#    aioschedule.every().friday.at("19:57").do(match_pairs)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(60)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(scheduler())
    executor.start_polling(dp, skip_updates=True)
